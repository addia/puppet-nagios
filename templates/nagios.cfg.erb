##############################################################################
#
# NAGIOS.CFG - Sample Main Config File for Nagios 4.0.8
#
# Read the documentation for more information on this configuration
# file.  I've provided some comments here, but things may not be so
# clear without further explanation.
#
#
##############################################################################


# LOG FILE
log_file=<%= @nagios_logdir %>/nagios.log


# OBJECT CONFIGURATION FILE(S)
cfg_file=<%= @objects_dir %>/commands.cfg
cfg_file=<%= @objects_dir %>/contacts.cfg
cfg_file=<%= @objects_dir %>/timeperiods.cfg
cfg_dir=<%= @objects_dir %>/services
cfg_dir=<%= @objects_dir %>/servers
cfg_dir=<%= @objects_dir %>/commands


# OBJECT CACHE FILE
object_cache_file=<%= @nagios_logdir %>/objects.cache


# PRE-CACHED OBJECT FILE
precached_object_file=<%= @nagios_logdir %>/objects.precache


# RESOURCE FILE
resource_file=<%= @private_dir %>/resource.cfg



# STATUS FILE
status_file=<%= @nagios_logdir %>/status.dat


# STATUS FILE UPDATE INTERVAL
status_update_interval=10


# NAGIOS USER
nagios_user=<%= @user %>


# NAGIOS GROUP
nagios_group=<%= @group %>


# EXTERNAL COMMAND OPTION
check_external_commands=1


# EXTERNAL COMMAND FILE
command_file=<%= @nagios_cmd %>/nagios.cmd


# QUERY HANDLER INTERFACE
query_socket=<%= @nagios_cmd %>/nagios.qh


# LOCK FILE
lock_file=/var/run/nagios/nagios.pid


# TEMP FILE
temp_file=<%= @nagios_logdir %>/nagios.tmp


# TEMP PATH
temp_path=/tmp


# EVENT BROKER OPTIONS
event_broker_options=-1


# EVENT BROKER MODULE(S)
# This directive is used to specify an event broker module that should
# by loaded by Nagios at startup.  Use multiple directives if you want
# to load more than one module.  Arguments that should be passed to
# the module at startup are seperated from the module path by a space.
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Do NOT overwrite modules while they are being used by Nagios or Nagios
# will crash in a fiery display of SEGFAULT glory.  This is a bug/limitation
# either in dlopen(), the kernel, and/or the filesystem.  And maybe Nagios...
#
# The correct/safe way of updating a module is by using one of these methods:
#    1. Shutdown Nagios, replace the module file, restart Nagios
#    2. Delete the original module file, move the new module file into place, restart Nagios
#
# Example:
#
#   broker_module=<modulepath> [moduleargs]

#broker_module=/somewhere/module1.o
#broker_module=/somewhere/module2.o arg1 arg2=3 debug=0



# LOG ROTATION METHOD
# This is the log rotation method that Nagios should use to rotate
# the main log file. Values are as follows..
#	n	= None - don't rotate the log
#	h	= Hourly rotation (top of the hour)
#	d	= Daily rotation (midnight every day)
#	w	= Weekly rotation (midnight on Saturday evening)
#	m	= Monthly rotation (midnight last day of month)

log_rotation_method=d


# LOG ARCHIVE PATH
log_archive_path=<%= @nagios_logdir %>/archives


# LOGGING OPTIONS
use_syslog=1


# NOTIFICATION LOGGING OPTION
log_notifications=1


# SERVICE RETRY LOGGING OPTION
log_service_retries=1


# HOST RETRY LOGGING OPTION
log_host_retries=1


# EVENT HANDLER LOGGING OPTION
log_event_handlers=1


# INITIAL STATES LOGGING OPTION
log_initial_states=0


# CURRENT STATES LOGGING OPTION
log_current_states=1


# EXTERNAL COMMANDS LOGGING OPTION
log_external_commands=1


# PASSIVE CHECKS LOGGING OPTION
log_passive_checks=1


# GLOBAL HOST AND SERVICE EVENT HANDLERS
# These options allow you to specify a host and service event handler
# command that is to be run for every host or service state change.
# The global event handler is executed immediately prior to the event
# handler that you have optionally specified in each host or
# service definition. The command argument is the short name of a
# command definition that you define in your host configuration file.
# Read the HTML docs for more information.

#global_host_event_handler=somecommand
#global_service_event_handler=somecommand



# SERVICE INTER-CHECK DELAY METHOD
# This is the method that Nagios should use when initially
# "spreading out" service checks when it starts monitoring.  The
# default is to use smart delay calculation, which will try to
# space all service checks out evenly to minimize CPU load.
# Using the dumb setting will cause all checks to be scheduled
# at the same time (with no delay between them)!  This is not a
# good thing for production, but is useful when testing the
# parallelization functionality.
#	n	= None - don't use any delay between checks
#	d	= Use a "dumb" delay of 1 second between checks
#	s	= Use "smart" inter-check delay calculation
#       x.xx    = Use an inter-check delay of x.xx seconds

service_inter_check_delay_method=s


# MAXIMUM SERVICE CHECK SPREAD
max_service_check_spread=30


# SERVICE CHECK INTERLEAVE FACTOR
# This variable determines how service checks are interleaved.
# Interleaving the service checks allows for a more even
# distribution of service checks and reduced load on remote
# hosts.  Setting this value to 1 is equivalent to how versions
# of Nagios previous to 0.0.5 did service checks.  Set this
# value to s (smart) for automatic calculation of the interleave
# factor unless you have a specific reason to change it.
#       s       = Use "smart" interleave factor calculation
#       x       = Use an interleave factor of x, where x is a
#                 number greater than or equal to 1.

service_interleave_factor=s


# HOST INTER-CHECK DELAY METHOD
# This is the method that Nagios should use when initially
# "spreading out" host checks when it starts monitoring.  The
# default is to use smart delay calculation, which will try to
# space all host checks out evenly to minimize CPU load.
# Using the dumb setting will cause all checks to be scheduled
# at the same time (with no delay between them)!
#	n	= None - don't use any delay between checks
#	d	= Use a "dumb" delay of 1 second between checks
#	s	= Use "smart" inter-check delay calculation
#       x.xx    = Use an inter-check delay of x.xx seconds

host_inter_check_delay_method=s


# MAXIMUM HOST CHECK SPREAD
max_host_check_spread=30


# MAXIMUM CONCURRENT SERVICE CHECKS
# This option allows you to specify the maximum number of
# service checks that can be run in parallel at any given time.
# Specifying a value of 1 for this variable essentially prevents
# any service checks from being parallelized.  A value of 0
# will not restrict the number of concurrent checks that are
# being executed.

max_concurrent_checks=0


# HOST AND SERVICE CHECK REAPER FREQUENCY
check_result_reaper_frequency=10


# MAX CHECK RESULT REAPER TIME
max_check_result_reaper_time=30


# CHECK RESULT PATH
check_result_path=<%= @nagios_logdir %>/spool/checkresults


# MAX CHECK RESULT FILE AGE
max_check_result_file_age=3600


# CACHED HOST CHECK HORIZON
cached_host_check_horizon=15


# CACHED SERVICE CHECK HORIZON
cached_service_check_horizon=15


# ENABLE PREDICTIVE HOST DEPENDENCY CHECKS
enable_predictive_host_dependency_checks=1


# ENABLE PREDICTIVE SERVICE DEPENDENCY CHECKS
enable_predictive_service_dependency_checks=1


# SOFT STATE DEPENDENCIES
soft_state_dependencies=0


# TIME CHANGE ADJUSTMENT THRESHOLDS
#time_change_threshold=900


# AUTO-RESCHEDULING OPTION
auto_reschedule_checks=0


# AUTO-RESCHEDULING INTERVAL
auto_rescheduling_interval=30


# AUTO-RESCHEDULING WINDOW
auto_rescheduling_window=180


# TIMEOUT VALUES
service_check_timeout=60
host_check_timeout=30
event_handler_timeout=30
notification_timeout=30
ocsp_timeout=5
perfdata_timeout=5


# RETAIN STATE INFORMATION
retain_state_information=1


# STATE RETENTION FILE
state_retention_file=<%= @nagios_logdir %>/retention.dat


# RETENTION DATA UPDATE INTERVAL
retention_update_interval=60


# USE RETAINED PROGRAM STATE
use_retained_program_state=1


# USE RETAINED SCHEDULING INFO
use_retained_scheduling_info=1


# RETAINED ATTRIBUTE MASKS (ADVANCED FEATURE)
# The following variables are used to specify specific host and
# service attributes that should *not* be retained by Nagios during
# program restarts.
#
# The values of the masks are bitwise ANDs of values specified
# by the "MODATTR_" definitions found in include/common.h.
# For example, if you do not want the current enabled/disabled state
# of flap detection and event handlers for hosts to be retained, you
# would use a value of 24 for the host attribute mask...
# MODATTR_EVENT_HANDLER_ENABLED (8) + MODATTR_FLAP_DETECTION_ENABLED (16) = 24

# This mask determines what host attributes are not retained
retained_host_attribute_mask=0

# This mask determines what service attributes are not retained
retained_service_attribute_mask=0

# These two masks determine what process attributes are not retained.
# There are two masks, because some process attributes have host and service
# options.  For example, you can disable active host checks, but leave active
# service checks enabled.
retained_process_host_attribute_mask=0
retained_process_service_attribute_mask=0

# These two masks determine what contact attributes are not retained.
# There are two masks, because some contact attributes have host and
# service options.  For example, you can disable host notifications for
# a contact, but leave service notifications enabled for them.
retained_contact_host_attribute_mask=0
retained_contact_service_attribute_mask=0


# INTERVAL LENGTH
interval_length=60


# CHECK FOR UPDATES
check_for_updates=1


# BARE UPDATE CHECK
bare_update_check=0


# AGGRESSIVE HOST CHECKING OPTION
use_aggressive_host_checking=0


# SERVICE CHECK EXECUTION OPTION
execute_service_checks=1


# PASSIVE SERVICE CHECK ACCEPTANCE OPTION
accept_passive_service_checks=1


# HOST CHECK EXECUTION OPTION
execute_host_checks=1


# PASSIVE HOST CHECK ACCEPTANCE OPTION
accept_passive_host_checks=1


# NOTIFICATIONS OPTION
enable_notifications=1


# EVENT HANDLER USE OPTION
enable_event_handlers=1


# PROCESS PERFORMANCE DATA OPTION
process_performance_data=1


# HOST AND SERVICE PERFORMANCE DATA PROCESSING COMMANDS
#host_perfdata_command=process-host-perfdata
#service_perfdata_command=process-service-perfdata


# HOST AND SERVICE PERFORMANCE DATA FILES
host_perfdata_file=<%= @nagios_logdir %>/host-perfdata
service_perfdata_file=<%= @nagios_logdir %>/service-perfdata


# HOST AND SERVICE PERFORMANCE DATA FILE TEMPLATES
service_perfdata_file_template=DATATYPE::SERVICEPERFDATA\tTIMET::$TIMET$\tHOSTNAME::$HOSTNAME$\tSERVICEDESC::$SERVICEDESC$\tSERVICEPERFDATA::$SERVICEPERFDATA$\tSERVICECHECKCOMMAND::$SERVICECHECKCOMMAND$\tHOSTSTATE::$HOSTSTATE$\tHOSTSTATETYPE::$HOSTSTATETYPE$\tSERVICESTATE::$SERVICESTATE$\tSERVICESTATETYPE::$SERVICESTATETYPE$
host_perfdata_file_template=DATATYPE::HOSTPERFDATA\tTIMET::$TIMET$\tHOSTNAME::$HOSTNAME$\tHOSTPERFDATA::$HOSTPERFDATA$\tHOSTCHECKCOMMAND::$HOSTCHECKCOMMAND$\tHOSTSTATE::$HOSTSTATE$\tHOSTSTATETYPE::$HOSTSTATETYPE$


# HOST AND SERVICE PERFORMANCE DATA FILE MODES
host_perfdata_file_mode=a
service_perfdata_file_mode=a


# HOST AND SERVICE PERFORMANCE DATA FILE PROCESSING INTERVAL
host_perfdata_file_processing_interval=15
service_perfdata_file_processing_interval=15


# HOST AND SERVICE PERFORMANCE DATA FILE PROCESSING COMMANDS
host_perfdata_file_processing_command=process-host-perfdata-file
service_perfdata_file_processing_command=process-service-perfdata-file


# HOST AND SERVICE PERFORMANCE DATA PROCESS EMPTY RESULTS
host_perfdata_process_empty_results=1
service_perfdata_process_empty_results=1


# OBSESS OVER SERVICE CHECKS OPTION
obsess_over_services=0


# OBSESSIVE COMPULSIVE SERVICE PROCESSOR COMMAND
#ocsp_command=somecommand


# OBSESS OVER HOST CHECKS OPTION
obsess_over_hosts=0


# OBSESSIVE COMPULSIVE HOST PROCESSOR COMMAND
#ochp_command=somecommand


# TRANSLATE PASSIVE HOST CHECKS OPTION
translate_passive_host_checks=0


# PASSIVE HOST CHECKS ARE SOFT OPTION
passive_host_checks_are_soft=0


# ORPHANED HOST/SERVICE CHECK OPTIONS
check_for_orphaned_services=1
check_for_orphaned_hosts=1


# SERVICE FRESHNESS CHECK OPTION
check_service_freshness=1


# SERVICE FRESHNESS CHECK INTERVAL
service_freshness_check_interval=60


# SERVICE CHECK TIMEOUT STATE
# Valid settings are:
# c - Critical (default)
# u - Unknown
# w - Warning
# o - OK
service_check_timeout_state=c


# HOST FRESHNESS CHECK OPTION
check_host_freshness=1


# HOST FRESHNESS CHECK INTERVAL
host_freshness_check_interval=120


# ADDITIONAL FRESHNESS THRESHOLD LATENCY
additional_freshness_latency=15


# FLAP DETECTION OPTION
enable_flap_detection=1


# FLAP DETECTION THRESHOLDS FOR HOSTS AND SERVICES
low_service_flap_threshold=5.0
high_service_flap_threshold=20.0
low_host_flap_threshold=5.0
high_host_flap_threshold=20.0


# DATE FORMAT OPTION
date_format=strict-iso8601


# TIMEZONE OFFSET
#use_timezone=US/Mountain
#use_timezone=Australia/Brisbane


# ILLEGAL OBJECT NAME CHARACTERS
illegal_object_name_chars=`~!$%^&*|'"<>?,()=


# ILLEGAL MACRO OUTPUT CHARACTERS
illegal_macro_output_chars=`~$&|'"<>


# REGULAR EXPRESSION MATCHING
use_regexp_matching=0


# "TRUE" REGULAR EXPRESSION MATCHING
use_true_regexp_matching=0


# ADMINISTRATOR EMAIL/PAGER ADDRESSES
admin_email=<%= @nagios_email %>
admin_pager=<%= @pager_email %>


# DAEMON CORE DUMP OPTION
daemon_dumps_core=0


# LARGE INSTALLATION TWEAKS OPTION
use_large_installation_tweaks=0


# ENABLE ENVIRONMENT MACROS
enable_environment_macros=1


# CHILD PROCESS MEMORY OPTION
#free_child_process_memory=1


# CHILD PROCESS FORKING BEHAVIOR
#child_processes_fork_twice=1


# DEBUG LEVEL
# This option determines how much (if any) debugging information will
# be written to the debug file.  OR values together to log multiple
# types of information.
# Values:
#          -1 = Everything
#          0 = Nothing
#	   1 = Functions
#          2 = Configuration
#          4 = Process information
#	   8 = Scheduled events
#          16 = Host/service checks
#          32 = Notifications
#          64 = Event broker
#          128 = External commands
#          256 = Commands
#          512 = Scheduled downtime
#          1024 = Comments
#          2048 = Macros

debug_level=0


# DEBUG VERBOSITY
# This option determines how verbose the debug log out will be.
# Values: 0 = Brief output
#         1 = More detailed
#         2 = Very detailed

debug_verbosity=1


# DEBUG FILE
debug_file=<%= @nagios_logdir %>/nagios.devug


# MAX DEBUG FILE SIZE
max_debug_file_size=1000000


# Should we allow hostgroups to have no hosts, we default this to off since
# that was the old behavior
allow_empty_hostgroup_assignment=0


# Normally worker count is dynamically allocated based on 1.5 * number of cpu's
# with a minimum of 4 workers.  This value will override the defaults
check_workers=2


# EXPERIMENTAL load controlling options
# To get current defaults based on your system issue a command to
# the query handler. Please note that this is an experimental feature
# and not meant for production use. Used incorrectly it can induce
# enormous latency.
# #core loadctl
#   jobs_max - The maximum amount of jobs to run at one time
#   jobs_min - The minimum amount of jobs to run at one time
#   jobs_limit - The maximum amount of jobs the current load lets us run
#   backoff_limit - The minimum backoff_change
#   backoff_change - # of jobs to remove from jobs_limit when backing off
#   rampup_limit - Minimum rampup_change
#   rampup_change - # of jobs to add to jobs_limit when ramping up
# NOTE: The backoff_limit and rampup_limit are NOT used by anything currently,
#       so if your system is under load nothing will actively modify the jobs
#       even if you have these options enabled, they are for external
#       connector information only.  However, if you change the jobs_max or
#       jobs_min manually here or through the query handler interface that
#       WILL affect your system
#loadctl_options=jobs_max=100;backoff_limit=10;rampup_change=5
